AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: "Creates Lambda and SNS topic to send notifications to a Teams channel"
Parameters:
  SNSTopicName:
    Type: String
    Default: teams-notification-topic
  
  TeamsUrl:
    Type: String


Resources:
  LambdaExecutionRole:
    Type: AWS::IAM:Role
    Properties:
      RoleName: TeamsNotificationLambdaExecutionRole
      ManagedPolicyArns:
        - arn:aws:iam:aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocyment:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'


  TeamsNotificator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/
      Handler: function.lambda_handler


      #Handler: index.lambda_handler
      Environment:
        Variables:
          TEAMS_URL: !Ref TeamsUrl
      MemorySize: 128
      Runtime: python3.7
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
  


  NotificatorSNSPermission:
    Type: AWS::Lambda::Permission
    Properites:
      FunctionName: !GetAtt TeamsNotificator.Arn
      Action: lambda.InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref TeamsNotificationTopic


  TeamsNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref SNSTopicName

  TeamsNotificationTopicPolicy:
    Type: AWS::SNS::Subscription
    DependsOn:
      - TeamsNotificator
      - TeamsNotificationTopic
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt TeamsNotificator.Arn
      TopicArn: !Ref TeamsNotificationTopic